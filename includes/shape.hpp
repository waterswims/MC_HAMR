#ifndef _SHAPE
#define _SHAPE

#include <vector>

namespace particle { namespace shape
{
    ///////////////////////////////////////////////////////////////////////////
    /// Base class for particle shapes.
    ///////////////////////////////////////////////////////////////////////////
    class shape_type
    {
    public:
        ////////////////////////////////////////////////////////////////////////
        /// Default constructor.
        ////////////////////////////////////////////////////////////////////////
        shape_type(){}
        ////////////////////////////////////////////////////////////////////////
        /// Default destructor.
        ////////////////////////////////////////////////////////////////////////
        ~shape_type(){}
        ////////////////////////////////////////////////////////////////////////
        /// \brief Check whether a certain position falls within the particle
        ///
        /// \param Is The coordinates of the lattice site.
        /// \param l_size The total lattice size.
        ////////////////////////////////////////////////////////////////////////
        virtual bool check(std::vector<int> Is, int l_size){return false;}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the characteristic size of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        virtual double get_r0(){return 0;}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the disorder parameter of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        virtual double get_beta(){return 0;}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the x-axis radius of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        virtual double get_a(){return 0;}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the y-axis radius of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        virtual double get_b(){return 0;}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the z-axis radius of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        virtual double get_c(){return 0;}
    };

    ///////////////////////////////////////////////////////////////////////////
    /// 2D particle shapes.
    ///////////////////////////////////////////////////////////////////////////
    class shape_2d: public shape_type
    {
    public:
        ////////////////////////////////////////////////////////////////////////
        /// Default constructor.
        ////////////////////////////////////////////////////////////////////////
        shape_2d(){}
        ////////////////////////////////////////////////////////////////////////
        /// Default destructor.
        ////////////////////////////////////////////////////////////////////////
        ~shape_2d(){}
        ////////////////////////////////////////////////////////////////////////
        /// \brief Check whether a certain position falls within the particle
        ///
        /// \param Is The coordinates of the lattice site.
        /// \param l_size The total lattice size.
        ////////////////////////////////////////////////////////////////////////
        virtual bool check(std::vector<int> Is, int l_size){return true;}
    };

    ///////////////////////////////////////////////////////////////////////////
    /// 3D particle shapes.
    ///////////////////////////////////////////////////////////////////////////
    class shape_3d: public shape_type
    {
    public:
        ////////////////////////////////////////////////////////////////////////
        /// Default constructor.
        ////////////////////////////////////////////////////////////////////////
        shape_3d(){}
        ////////////////////////////////////////////////////////////////////////
        /// Default destructor.
        ////////////////////////////////////////////////////////////////////////
        ~shape_3d(){}
        ////////////////////////////////////////////////////////////////////////
        /// \brief Check whether a certain position falls within the particle
        ///
        /// \param Is The coordinates of the lattice site.
        /// \param l_size The total lattice size.
        ////////////////////////////////////////////////////////////////////////
        virtual bool check(std::vector<int> Is, int l_size){return true;}
    };

    ///////////////////////////////////////////////////////////////////////////
    /// Weibull disordered circle/sphere particle
    ///////////////////////////////////////////////////////////////////////////
    class weibull: public shape_type
    {
    private:
        double r0;
        double beta;
        double a[3];
    public:
        ////////////////////////////////////////////////////////////////////////
        /// Default constructor.
        ////////////////////////////////////////////////////////////////////////
        weibull(){r0 = 0; beta = 0; a[0] = 1; a[1] = 1; a[2] = 1;}
        ////////////////////////////////////////////////////////////////////////
        /// Copy constructor.
        ////////////////////////////////////////////////////////////////////////
        weibull(shape_type& other);
        ////////////////////////////////////////////////////////////////////////
        /// \brief Constructor defining a spherical particle with a disordered
        ///        surface.
        ///
        /// \param rin The average radius of the sphere.
        /// \param bin The disorder parameter.
        ////////////////////////////////////////////////////////////////////////
        weibull(double rin, double bin);
        ////////////////////////////////////////////////////////////////////////
        /// \brief Constructor defining an ellipsoid particle with a disordered
        ///        surface.
        ///
        /// \param betain The disorder parameter.
        /// \param ain The x-axis size of the particle.
        /// \param bin The y-axis size of the particle.
        /// \param cin The z-axis size of the particle.
        ////////////////////////////////////////////////////////////////////////
        weibull(double betain, double ain, double bin, double cin);
        ////////////////////////////////////////////////////////////////////////
        /// Default destructor.
        ////////////////////////////////////////////////////////////////////////
        ~weibull(){}
        ////////////////////////////////////////////////////////////////////////
        /// \brief Check whether a certain position falls within the particle
        ///
        /// \param Is The coordinates of the lattice site.
        /// \param l_size The total lattice size.
        ////////////////////////////////////////////////////////////////////////
        bool check(std::vector<int> Is, int l_size);
        ////////////////////////////////////////////////////////////////////////
        /// Assignment operator
        ////////////////////////////////////////////////////////////////////////
        weibull& operator=(shape_type& other);
        ////////////////////////////////////////////////////////////////////////
        /// Returns the characteristic size of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        double get_r0(){return r0;}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the disorder parameter of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        double get_beta(){return beta;}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the x-axis radius of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        double get_a(){return a[0];}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the y-axis radius of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        double get_b(){return a[1];}
        ////////////////////////////////////////////////////////////////////////
        /// Returns the z-axis radius of a weibull particle.
        ////////////////////////////////////////////////////////////////////////
        double get_c(){return a[2];}
    };

    ///////////////////////////////////////////////////////////////////////////
    /// Square particle
    ///////////////////////////////////////////////////////////////////////////
    class square: public shape_2d
    {
    public:
        ////////////////////////////////////////////////////////////////////////
        /// Default constructor.
        ////////////////////////////////////////////////////////////////////////
        square(){}
        ////////////////////////////////////////////////////////////////////////
        /// Default destructor.
        ////////////////////////////////////////////////////////////////////////
        ~square(){}
    };

    ///////////////////////////////////////////////////////////////////////////
    /// Cubic paritcle
    ///////////////////////////////////////////////////////////////////////////
    class cube: public shape_3d
    {
    public:
        ////////////////////////////////////////////////////////////////////////
        /// Default constructor.
        ////////////////////////////////////////////////////////////////////////
        cube(){}
        ////////////////////////////////////////////////////////////////////////
        /// Default destructor.
        ////////////////////////////////////////////////////////////////////////
        ~cube(){}
    };

    ///////////////////////////////////////////////////////////////////////////
    /// Particle cluster (depreciated)
    ///////////////////////////////////////////////////////////////////////////
    class sh_cluster: public shape_3d
    {
    public:
        ////////////////////////////////////////////////////////////////////////
        /// Default constructor.
        ////////////////////////////////////////////////////////////////////////
        sh_cluster(){}
        ////////////////////////////////////////////////////////////////////////
        /// Default destructor.
        ////////////////////////////////////////////////////////////////////////
        ~sh_cluster(){}
    };
}}

#endif
